#version 330 core
in vec2 TexCoord;
in vec3 Normal;
in vec3 FragPos;

struct LinearLight {
    vec3 position;
    float constant;
    float linear;
    float quadratic;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct SpotLight {
    vec3 position;
    float constant;
    float linear;
    float quadratic;

    vec3 direction;
    float cutOff;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float     shininess;
}; 

uniform Material material;
uniform LinearLight linearLight;
uniform SpotLight spotLight;

uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

uniform sampler2D ourTexture1;
uniform sampler2D ourTexture2;
out vec4 color;

void main()
{
    vec3 ambient = spotLight.ambient * vec3(texture(material.diffuse,TexCoord)) ;
    vec3 lightDir = normalize(spotLight.position - FragPos);

    float thera = dot(lightDir, normalize(-spotLight.direction));

    if(thera > spotLight.cutOff) {
        
        vec3 normal = normalize(Normal);
        float diff = max(dot(normal, lightDir),0);
        vec3 diffuse = diff * spotLight.diffuse * vec3(texture(material.diffuse,TexCoord));

        float specularStrength = 1.0;
        vec3 viewDir = normalize(viewPos - FragPos);
        vec3 reflectDir = reflect(-lightDir, normal);
        float spec = pow(max(dot(viewDir, reflectDir), 0),32.0);
        vec3 specular = spec * specularStrength * spotLight.specular * vec3(texture(material.specular,TexCoord));


        //attenuation
        float distance = length(spotLight.position - FragPos);

        float attenuation = 1.0 / (spotLight.constant + spotLight.linear * distance + spotLight.quadratic * (distance * distance));

        vec3 result = ambient + ( diffuse + specular) * attenuation ;
        color = vec4(result, 1.0);
    } else {
        color = vec4(ambient,1.0);
    }

}