#version 330 core
in vec2 TexCoord;
in vec3 Normal;
in vec3 FragPos;

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float     shininess;
}; 

uniform Material material;
uniform Light light;
uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

uniform sampler2D ourTexture1;
uniform sampler2D ourTexture2;
out vec4 color;

void main()
{
    vec3 ambient = light.ambient * vec3(texture(material.diffuse,TexCoord)) ;
   
    vec3 normal = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPos);
    float diff = max(dot(normal, lightDir),0);
    vec3 diffuse = diff * light.diffuse * vec3(texture(material.diffuse,TexCoord));

    float specularStrength = 1.0;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0),32.0);
    vec3 specular = spec * specularStrength * light.specular * vec3(texture(material.specular,TexCoord));

    vec3 result = (ambient + diffuse + specular) ;
    color = vec4(result, 1.0);
}